(defwindow bar
	:monitor '["<primary>", 0]'
	:windowtype "dock"
	:stacking "fg"
	:geometry (geometry :x "0%"
						:y "0%"
						:width "99.5%"
						:height "2%"
						:anchor "top center")
	:reserve (struts :side "top" :distance "2%")
(bar))

(defwidget bar []
	(centerbox :class "bar_class"
		:orientation "h"
		(right)
		(center)
		(left)))

(defwidget right []
	(box :orientation "h" 
		 :space-evenly false  
         :halign "start"
		 :class "right_modules"
(tags-w0)))

(defwidget center []
	(box :orientation "h" 
		 :space-evenly false  
         :halign "center"
		 :class "center_modules"
(clock_module)))

(defwidget left []
	(box :orientation "h" 
		 :space-evenly false  
         :halign "end"
		 :class "left_modules"
(network)
(sep)
(cpu)
(sep)
(mem)
(sep)
(bat)))

(deflisten wm0-tags "leftwm-state")
(defwidget tags-w0 []
	(box :class "workspaces"
		:orientation "h"
		:space-evenly true
		:halign "start"
		:spacing 4
		(for tag in {wm0-tags.workspaces[0].tags}
			(button :class "${ tag.focused ? "ws-button-focus" : "ws-button-visible"}"			:onclick `leftwm-command "SendWorkspaceToTag 0 ${tag.index}"` `${tag.index+1}`)))
)


(defpoll clock_time :interval "5s" `date '+%H:%M %d/%m/%Y'`)
(defwidget clock_module []
	(box :class "module" 
		:space-evenly "false" 
		:orientation "h" 
		:spacing "3" 
		(label :text clock_time)))

(defwidget sep [] (box (label :class "sep" :text "|")))

(defwidget cpu []
		(box :class "cpu_module" 
			:tooltip "CPU Usage: ${round(EWW_CPU.avg, 4)}%"
			:space-evenly "false" 
			(label :class "icon" :text "  ")
			(label :class "cpu ${ EWW_CPU.avg >= 90 ? 'danger':''}"		
				:text "${round(EWW_CPU.avg, 2)}%"
				)))

(defwidget mem []
		(box :class "ram_module" 
			:tooltip "RAM Usage: ${round(EWW_RAM.used_mem_perc, 4)}%"
			:space-evenly "false" 
			(label :class "icon" :text " ")
			(label :class "mem ${ EWW_RAM.used_mem_perc >= 90 ? 'danger':''}"		
				:text "${round(EWW_RAM.used_mem/1000000000, 2)}/${round(EWW_RAM.total_mem/1000000000, 2)}GB"
				)))

(defpoll battery-text :interval "1s" "./scripts/battery text")
(defpoll battery-capacity :interval "1s" "./scripts/battery percent")
(defwidget bat []
		(box :class "bat_module"
			(label	:class "bat ${ battery-capacity <= 20 ? 'danger':''}"		
				:text "${battery-text}"
				:tooltip "Battery: ${battery-capacity}%")))

(defpoll wlan0-wifi-name :interval "5s" "wpa_cli status | grep -G '^ssid=' | cut -c6-")
(defwidget network []
		(box :class "network_module"
			(label	:class "${ wlan0-wifi-name == '' ? 'danger':''}"		
				:text "${wlan0-wifi-name != '' ? '󰖩 ' + wlan0-wifi-name : '󰖪 '}"
				:tooltip "${wlan0-wifi-name != '' ? 'wlan0 ssid: ' + wlan0-wifi-name : 'No connection'}")))
